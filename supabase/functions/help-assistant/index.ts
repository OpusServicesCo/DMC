import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/std@0.168.0/dotenv/load.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, conversationHistory = [] } = await req.json();
    console.log('ü§ñ Help Assistant request:', { message, historyLength: conversationHistory.length });

    if (!message) {
      throw new Error('Message is required');
    }

    const systemPrompt = `Vous √™tes l'assistant IA du syst√®me m√©dical DMC (Digital Medical Center). Vous √™tes un expert en aide utilisateur pour ce logiciel de gestion m√©dicale.

VOTRE R√îLE :
- Aider les utilisateurs √† naviguer et utiliser le syst√®me DMC
- Fournir des instructions claires et pr√©cises
- R√©pondre aux questions techniques sur les fonctionnalit√©s
- Proposer des solutions aux probl√®mes courants
- √ätre professionnel, bienveillant et efficace

FONCTIONNALIT√âS DU SYST√àME DMC :
‚Ä¢ üë• **Gestion des patients** : Cr√©ation, modification, dossiers m√©dicaux complets
‚Ä¢ üìÖ **Rendez-vous** : Planification, calendrier, rappels automatiques
‚Ä¢ ü©∫ **Consultations** : Sp√©cialis√©es, nutritionnelles, avec IA int√©gr√©e
‚Ä¢ üí∞ **Paiements** : Cash, Mobile Money, Carte, Assurance
‚Ä¢ üìä **Facturation** : G√©n√©ration automatique, export PDF
‚Ä¢ üìà **Caisse** : Gestion financi√®re, rapports, comptabilit√©
‚Ä¢ üîî **Notifications** : Alertes, rappels, notifications syst√®me
‚Ä¢ ‚öôÔ∏è **Param√®tres** : Configuration utilisateur, th√®mes, permissions
‚Ä¢ ü§ñ **IA m√©dicale** : Aide au diagnostic, suggestions, analyse

STYLE DE R√âPONSE :
- R√©ponses courtes et structur√©es
- Utilisez des puces et num√©rotation pour les √©tapes
- Mentionnez les menus/boutons exacts √† cliquer
- Proposez des alternatives si n√©cessaire
- Demandez des pr√©cisions si la question est vague
- R√©pondez en fran√ßais

CONTEXTE TECHNIQUE :
- Interface web moderne avec navigation intuitive
- Syst√®me bas√© sur Supabase avec authentification
- Support des th√®mes clair/sombre
- Notifications en temps r√©el
- Export de donn√©es en Excel/PDF

R√©pondez de mani√®re utile et pr√©cise √† la question de l'utilisateur.`;

    // Construire l'historique de conversation pour le contexte
    const messages = [
      { role: "system", content: systemPrompt },
      ...conversationHistory.map((msg: any) => ({
        role: msg.isBot ? "assistant" : "user",
        content: msg.text
      })),
      { role: "user", content: message }
    ];

    console.log('üì§ Sending request to OpenAI...');

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini', // Mod√®le rapide et √©conomique pour l'assistance
        messages,
        temperature: 0.7, // Balance entre cr√©ativit√© et pr√©cision
        max_tokens: 800, // R√©ponses concises
        top_p: 1,
        frequency_penalty: 0,
        presence_penalty: 0,
      }),
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('‚ùå OpenAI API error:', errorData);
      throw new Error(`OpenAI API error: ${response.status} ${errorData}`);
    }

    const data = await response.json();
    console.log('‚úÖ OpenAI response received');

    const aiResponse = data.choices[0]?.message?.content || "D√©sol√©, je n'ai pas pu g√©n√©rer une r√©ponse.";

    return new Response(
      JSON.stringify({ 
        response: aiResponse,
        usage: data.usage
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );

  } catch (error: any) {
    console.error('‚ùå Help Assistant error:', error);
    
    let errorMessage = "Une erreur technique est survenue.";
    
    if (error.message?.includes('quota') || error.message?.includes('insufficient_quota')) {
      errorMessage = "Quota OpenAI d√©pass√©. Veuillez contacter l'administrateur.";
    } else if (error.message?.includes('rate_limit')) {
      errorMessage = "Trop de requ√™tes. Veuillez patienter quelques secondes.";
    } else if (error.message?.includes('API key')) {
      errorMessage = "Configuration OpenAI manquante. Contactez l'administrateur.";
    }

    return new Response(
      JSON.stringify({ 
        error: errorMessage,
        details: error.message 
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});
