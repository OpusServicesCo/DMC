
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/std@0.168.0/dotenv/load.ts";


const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { transcription, patientInfo, action, model = 'gpt-4o', temperature = 0.7, context = {} } = await req.json();
    console.log('ü§ñ AI Assistant request:', { action, model, temperature });

    if (!transcription && !context && action !== 'help_assistant') {
      throw new Error('Transcription text or context is required');
    }
    
    if (action === 'help_assistant' && !transcription) {
      throw new Error('Message is required for help assistant');
    }

    let prompt = '';
    let systemPrompt = '';
    
    if (action === 'extract_data') {
      systemPrompt = `Vous √™tes un assistant m√©dical IA expert en nutrition et consultation m√©dicale. 
      Analysez avec pr√©cision les transcriptions de consultations et extrayez les donn√©es structur√©es.
      Soyez pr√©cis avec les valeurs num√©riques et utilisez null pour les donn√©es non mentionn√©es.
      Respectez strictement le format JSON demand√©.`;

      prompt = `Analysez cette transcription de consultation nutritionnelle et extrayez les donn√©es structur√©es :

TRANSCRIPTION: "${transcription}"

PATIENT: ${patientInfo ? `${patientInfo.nom} ${patientInfo.prenom}, ${patientInfo.age || '√¢ge non sp√©cifi√©'} ans, ${patientInfo.sexe || 'sexe non sp√©cifi√©'}` : 'Informations patient non disponibles'}

DONN√âES EXISTANTES: ${patientInfo ? JSON.stringify(patientInfo, null, 2) : 'Aucune donn√©e existante'}

Retournez UNIQUEMENT un objet JSON valide avec cette structure exacte :

{
  "constantes": {
    "poids": number | null,
    "taille": number | null,
    "imc": number | null,
    "tension_systolique": number | null,
    "tension_diastolique": number | null,
    "glycemie": number | null,
    "glycemie_type": "a_jeun" | "apres_repas" | "aleatoire" | null,
    "cholesterol_total": number | null,
    "cholesterol_hdl": number | null,
    "cholesterol_ldl": number | null,
    "triglycerides": number | null,
    "tour_taille": number | null,
    "frequence_cardiaque": number | null
  },
  "diagnostic": {
    "surpoids": boolean,
    "obesite": boolean,
    "obesite_grade": "I" | "II" | "III" | null,
    "diabete_type1": boolean,
    "diabete_type2": boolean,
    "prediabete": boolean,
    "syndrome_metabolique": boolean,
    "hypertension": boolean,
    "hypertension_grade": "grade_1" | "grade_2" | "grade_3" | null,
    "dyslipid√©mie": boolean,
    "carence_fer": boolean,
    "carence_b12": boolean,
    "carence_vitamine_d": boolean,
    "trouble_alimentaire": boolean,
    "type_trouble_alimentaire": string | null,
    "allergies_alimentaires": string | null,
    "intol√©rances": string | null,
    "pathologies_associ√©es": string | null,
    "facteurs_risque": string[] | null,
    "remarques_medecin": string | null
  },
  "plan_nutritionnel": {
    "objectif_principal": string | null,
    "objectif_poids": number | null,
    "apport_calorique_cible": number | null,
    "r√©partition_macronutriments": {
      "proteines_pourcentage": number | null,
      "lipides_pourcentage": number | null,
      "glucides_pourcentage": number | null
    },
    "conseils_alimentaires": string | null,
    "aliments_privil√©gier": string[] | null,
    "aliments_limiter": string[] | null,
    "interdictions_alimentaires": string | null,
    "complements_recommandes": string[] | null,
    "hydratation_objectif": number | null,
    "niveau_activite_recommande": string | null,
    "frequence_repas": number | null
  },
  "suivi": {
    "frequence_rdv": "hebdomadaire" | "bimensuel" | "mensuel" | "trimestriel" | null,
    "date_prochain_rdv": string | null,
    "objectifs_court_terme": string[] | null,
    "objectifs_long_terme": string[] | null,
    "indicateurs_suivi": string[] | null,
    "examens_preconises": string[] | null,
    "alarme_suivi": boolean,
    "notes_suivi": string | null
  }
}

IMPORTANT: Calculez l'IMC si poids et taille sont disponibles (IMC = poids / (taille en m√®tres)¬≤).
Si des donn√©es existent d√©j√†, ne les √©crasez que si de nouvelles valeurs sont explicitement mentionn√©es.`;
      
    } else if (action === 'suggest_nutrition') {
      systemPrompt = `Vous √™tes un nutritionniste expert avec une vaste exp√©rience clinique.
      Cr√©ez des plans nutritionnels personnalis√©s, scientifiquement fond√©s et pratiques.
      Tenez compte des contraintes m√©dicales, sociales et personnelles du patient.`;

      prompt = `Cr√©ez un plan nutritionnel d√©taill√© et personnalis√© bas√© sur :

CONSULTATION: "${transcription}"
PATIENT: ${patientInfo ? JSON.stringify(patientInfo, null, 2) : 'Informations non disponibles'}
CONTEXTE M√âDICAL: ${context.medicalHistory || 'Aucun ant√©c√©dent sp√©cifi√©'}

G√©n√©rez un plan nutritionnel complet en format JSON :

{
  "objectif_principal": "Description claire de l'objectif principal",
  "objectifs_specifiques": ["objectif 1", "objectif 2", "..."],
  "apport_energetique": {
    "kcal_jour": number,
    "repartition_repas": {
      "petit_dejeuner": number,
      "dejeuner": number,
      "diner": number,
      "collations": number
    }
  },
  "macronutriments": {
    "proteines": {"grammes": number, "pourcentage": number, "sources_recommandees": []},
    "lipides": {"grammes": number, "pourcentage": number, "sources_recommandees": []},
    "glucides": {"grammes": number, "pourcentage": number, "sources_recommandees": []}
  },
  "menu_type_journee": {
    "petit_dejeuner": "Exemple de petit-d√©jeuner √©quilibr√©",
    "dejeuner": "Exemple de d√©jeuner √©quilibr√©",
    "diner": "Exemple de d√Æner √©quilibr√©",
    "collations": ["collation 1", "collation 2"]
  },
  "aliments_privil√©gier": ["aliment 1", "aliment 2", "..."],
  "aliments_limiter": ["aliment 1", "aliment 2", "..."],
  "interdictions_formelles": ["aliment 1", "aliment 2", "..."],
  "complements_nutritionnels": [{"nom": "...", "dosage": "...", "justification": "..."}],
  "hydratation": {
    "eau_litres_jour": number,
    "autres_boissons": ["boisson 1", "boisson 2"]
  },
  "activite_physique": {
    "type_recommande": "Description du type d'activit√©",
    "frequence_semaine": number,
    "duree_seance": "dur√©e en minutes",
    "intensite": "faible | mod√©r√©e | √©lev√©e"
  },
  "conseils_pratiques": ["conseil 1", "conseil 2", "..."],
  "surveillance": {
    "parametres_suivre": ["param√®tre 1", "param√®tre 2"],
    "frequence_pesee": "quotidienne | hebdomadaire | mensuelle",
    "signes_alerte": ["signe 1", "signe 2"]
  },
  "suivi_recommande": {
    "prochaine_consultation": "d√©lai recommand√©",
    "examens_biologiques": ["examen 1", "examen 2"],
    "objectifs_court_terme": ["objectif 1", "objectif 2"],
    "objectifs_long_terme": ["objectif 1", "objectif 2"]
  }
}`;

    } else if (action === 'voice_response') {
      systemPrompt = `Vous √™tes un assistant m√©dical vocal professionnel, bienveillant et expert en nutrition.
      R√©pondez de mani√®re conversationnelle, claire et rassurante.
      Vos r√©ponses sont adapt√©es au contexte m√©dical fran√ßais et utilisent un langage accessible.
      Restez dans votre domaine de comp√©tence et orientez vers un m√©decin si n√©cessaire.`;

      prompt = `Question du professionnel de sant√© : "${transcription}"

CONTEXTE PATIENT: ${context.currentPatient ? JSON.stringify(context.currentPatient) : 'Aucun patient sp√©cifique'}
CONTEXTE M√âDICAL: ${context.medicalContext || 'Contexte g√©n√©ral'}
HISTORIQUE: ${context.conversationHistory?.slice(-3).join('\n') || 'Pas d\'historique'}

R√©pondez de mani√®re professionnelle, concise et utile. Votre r√©ponse sera lue √† haute voix.
Limitez-vous √† 200 mots maximum et structurez votre r√©ponse clairement.`;

    } else if (action === 'generate_summary') {
      systemPrompt = `Vous √™tes un expert en r√©daction m√©dicale. 
      Cr√©ez des r√©sum√©s de consultation clairs, complets et structur√©s pour le dossier m√©dical.`;

      prompt = `G√©n√©rez un r√©sum√© professionnel de cette consultation :

DONN√âES CONSULTATION: ${transcription}

Cr√©ez un r√©sum√© structur√© incluant :
- Motif de consultation
- Anamn√®se et ant√©c√©dents pertinents
- Examen clinique et constantes
- Diagnostic(s) retenu(s)
- Plan th√©rapeutique et nutritionnel
- Suivi programm√©
- Recommandations au patient

Format : Texte structur√© professionnel pour dossier m√©dical.`;

    } else if (action === 'risk_analysis') {
      systemPrompt = `Vous √™tes un expert en √©valuation des risques nutritionnels et m√©taboliques.
      Analysez les donn√©es patient pour identifier les facteurs de risque et proposer des mesures pr√©ventives.`;

      prompt = `Analysez les risques pour ce patient :

DONN√âES PATIENT: ${transcription}

Retournez une analyse JSON compl√®te :

{
  "niveau_risque_global": "faible | mod√©r√© | √©lev√© | tr√®s_√©lev√©",
  "risques_identifi√©s": [
    {
      "facteur": "nom du facteur de risque",
      "niveau": "faible | mod√©r√© | √©lev√©",
      "description": "description d√©taill√©e",
      "consequences_potentielles": ["cons√©quence 1", "cons√©quence 2"]
    }
  ],
  "facteurs_protecteurs": ["facteur 1", "facteur 2"],
  "recommandations_preventives": [
    {
      "priorit√©": "haute | moyenne | faible",
      "action": "description de l'action recommand√©e",
      "d√©lai": "imm√©diat | court_terme | long_terme"
    }
  ],
  "surveillance_recommand√©e": {
    "param√®tres": ["param√®tre 1", "param√®tre 2"],
    "fr√©quence": "quotidienne | hebdomadaire | mensuelle | trimestrielle"
  },
  "score_risque_cardiovasculaire": number,
  "score_risque_diab√®te": number,
  "recommandations_mode_vie": ["recommandation 1", "recommandation 2"]
}`;
    } else if (action === 'help_assistant') {
      systemPrompt = `Vous √™tes l'assistant IA du syst√®me m√©dical DMC (Digital Medical Center). Vous √™tes un expert en aide utilisateur pour ce logiciel de gestion m√©dicale.

VOTRE R√îLE :
- Aider les utilisateurs √† naviguer et utiliser le syst√®me DMC
- Fournir des instructions claires et pr√©cises
- R√©pondre aux questions techniques sur les fonctionnalit√©s
- Proposer des solutions aux probl√®mes courants
- √ätre professionnel, bienveillant et efficace

FONCTIONNALIT√âS DU SYST√àME DMC :
‚Ä¢ üë• Gestion des patients : Cr√©ation, modification, dossiers m√©dicaux complets
‚Ä¢ üìÖ Rendez-vous : Planification, calendrier, rappels automatiques
‚Ä¢ ü©∫ Consultations : Sp√©cialis√©es, nutritionnelles, avec IA int√©gr√©e
‚Ä¢ üí∞ Paiements : Cash, Mobile Money, Carte, Assurance
‚Ä¢ üìä Facturation : G√©n√©ration automatique, export PDF
‚Ä¢ üìà Caisse : Gestion financi√®re, rapports, comptabilit√©
‚Ä¢ üîî Notifications : Alertes, rappels, notifications syst√®me
‚Ä¢ ‚öôÔ∏è Param√®tres : Configuration utilisateur, th√®mes, permissions
‚Ä¢ ü§ñ IA m√©dicale : Aide au diagnostic, suggestions, analyse

STYLE DE R√âPONSE :
- R√©ponses courtes et structur√©es
- Utilisez des puces et num√©rotation pour les √©tapes
- Mentionnez les menus/boutons exacts √† cliquer
- Proposez des alternatives si n√©cessaire
- Demandez des pr√©cisions si la question est vague
- R√©pondez en fran√ßais

R√©pondez de mani√®re utile et pr√©cise √† la question de l'utilisateur.`;

      // Construire l'historique de conversation pour le contexte
      let conversationContext = '';
      if (context.conversationHistory && context.conversationHistory.length > 0) {
        conversationContext = '\n\nCONTEXTE DE LA CONVERSATION :\n' + 
          context.conversationHistory.map((msg: any) => 
            `${msg.isBot ? 'Assistant' : 'Utilisateur'}: ${msg.text}`
          ).join('\n');
      }

      prompt = `${transcription}${conversationContext}`;
    }

    console.log('üì§ Envoi requ√™te OpenAI - Mod√®le:', model);

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: model,
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: prompt }
        ],
        temperature: temperature,
        max_tokens: action === 'voice_response' ? 300 : 2000,
        presence_penalty: 0.1,
        frequency_penalty: 0.1,
      }),
    });

    if (!response.ok) {
      const errorData = await response.text();
      console.error('‚ùå Erreur OpenAI API:', errorData);
      throw new Error(`Erreur OpenAI API: ${response.status} ${errorData}`);
    }

    const data = await response.json();
    console.log('‚úÖ R√©ponse OpenAI re√ßue');

    if (!data.choices?.[0]?.message?.content) {
      throw new Error('Format de r√©ponse API inattendu');
    }

    let result = data.choices[0].message.content;

    // Pour les r√©ponses JSON, essayez de parser et valider
    if (['extract_data', 'suggest_nutrition', 'risk_analysis'].includes(action)) {
      try {
        result = JSON.parse(result);
        console.log('‚úÖ JSON pars√© avec succ√®s');
      } catch (e) {
        console.error('‚ùå √âchec parsing JSON:', result);
        throw new Error('R√©ponse IA invalide - Format JSON incorrect');
      }
    }

    // Log des m√©triques
    console.log('üìä M√©triques:', {
      action,
      model,
      tokens_used: data.usage?.total_tokens || 0,
      response_length: typeof result === 'string' ? result.length : JSON.stringify(result).length
    });

    return new Response(JSON.stringify({ 
      result,
      action,
      metadata: {
        model: model,
        tokens_used: data.usage?.total_tokens || 0,
        processing_time: Date.now()
      }
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('‚ùå Erreur dans ai-consultation-assistant:', error);
    return new Response(JSON.stringify({ 
      error: error.message || 'Une erreur est survenue lors de l\'analyse IA',
      details: error.stack || 'Aucun d√©tail disponible'
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
